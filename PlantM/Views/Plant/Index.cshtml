@model PagedList.IPagedList<PlantM.Models.PlantModels.Plant>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{
    ViewBag.Title = "Index";
}

<h2>Plants</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>

@using (Html.BeginForm("Index", "Plant", FormMethod.Get))
{
    <p>
        Search: @Html.TextBox("searchString", ViewBag.CurrentFilter as string)
        <input type="submit" value="Search" />
    </p>
}

<table class="table">
    <tr>
        <th>
            @Html.DisplayName("Status")
        </th>
        <th>
            @Html.ActionLink("Collection No.", "Index", "Plant", new { sortOrder = ViewBag.CollectionNumberSortParam, currentFilter = ViewBag.CurrentFilter }, new{ })
        </th>
        <th>
            @Html.DisplayNameFor(model => model[0].AcquisitionTypeName)
        </th>
        <th>
            @Html.ActionLink("Location", "Index", "Plant", new { sortOrder = ViewBag.LocationSortParam, currentFilter = ViewBag.CurrentFilter }, new { })
        </th>
        <th>
            @Html.DisplayNameFor(model => model[0].SoilName)
        </th>
        <th>
            @Html.ActionLink("Species label", "Index", "Plant", new { sortOrder = ViewBag.SpeciesLabelParam, currentFilter = ViewBag.CurrentFilter }, new { })
        </th>
        <th>
            @Html.DisplayNameFor(model => model[0].VendorName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model[0].Size)
        </th>
        <th>
            @Html.DisplayNameFor(model => model[0].DateOfAcquisition)
        </th>
        <th>
            @Html.DisplayNameFor(model => model[0].Age)
        </th>
        <th>
            @Html.DisplayNameFor(model => model[0].PotType)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @if (item.IsDeleted)
                {
                    @Html.Label($"Deleted", new { @class = "label-inactive-plant label-in-list" })
                }
                else if (item.HasWithered)
                {
                    @Html.Label($"Withered", new { @class = "label-inactive-plant label-in-list" })
                }
                else
                {
                    @Html.Label($"Alive", new { @class = "label-active-plant label-in-list" })
                }
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CollectionNumber)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.AcquisitionTypeName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LocationName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.SoilName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.SpeciesLabelName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.VendorName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Size)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DateOfAcquisition)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Age)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PotType)
            </td>
            <td>
                @Html.ActionLink("Details", "Details", new {id = item.CollectionNumber})
            </td>
        </tr>
    }

</table>

<br />
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index",
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
